```
class DomainParts(NamedTuple):
    domain: str
    subdomain: str = None

    def iter_variants(self):
        """
        Generate variants of the domain and subdomain.

        The variants are generated by iterating over the parts of the domain (split by '.')
        and combining them with the subdomain parts (if subdomain is not None, split by '.').

        If the subdomain is not None, the subdomain parts are included in each variant. If the
        subdomain is None, the subdomain part of the DomainParts object will be None.
        
        For each yielding variant of `DomainParts`, the domain part consists of the segments starting from the current 
        index to the end of the domain. The subdomain parts are prepended to the domain 
        parts, consisting of segments from the start of the domain up to the current index.


        Yields:
            DomainParts: A new DomainParts instance with a variant 
            of the domain and subdomain.
        """
        parts = self.domain.split('.')
        for i in range(len(parts)):
            domain = '.'.join(parts[i:])
            subdomain_parts = parts[:i]
            if self.subdomain is not None:
                subdomain_parts.append(self.subdomain)
            subdomain = '.'.join(subdomain_parts) if subdomain_parts else None
            yield DomainParts(domain, subdomain)
```