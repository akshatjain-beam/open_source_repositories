```
class DomainParts(NamedTuple):
    """
    Represents parts of a domain and its optional subdomain.

    Attributes:
        domain (str): The main domain name.
        subdomain (Optional[str]): The subdomain name, if any. Defaults to None.
    """
    domain: str
    subdomain: str = None

    def iter_variants(self):
        """
        Iterate over variants of the domain and subdomain.

        The variants are generated by iterating over the parts of the domain (split by '.')
        and combining them with the subdomain parts (if subdomain is not None, split by '.').

        For each yielding variant of `DomainParts`, the domain part consists of
        the segments starting from the current index to the end of the domain.
        The subdomain part consists of the segments from the start of the domain
        up to the current index, appended to the subdomain parts.

        If the subdomain is provided, the subdomain part consists of the
        segments from the start of the domain up to the current index prepended
        to the subdomain parts. If the subdomain is None, it will remain None
        in the yielded variants.

        Yields:
            DomainParts: A new DomainParts instance with a variant
            of the domain and subdomain.
        """
        parts = self.domain.split(".")
        for i in range(len(parts)):
            domain = ".".join(parts[i:])
            subdomain = ".".join(parts[:i])
            if self.subdomain is not None:
                subdomain = ".".join([subdomain, self.subdomain]) if subdomain else self.subdomain
            yield DomainParts(domain, subdomain)
```